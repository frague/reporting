#!/usr/bin/python

import libxml2
from rabbithole import *

'''

<td>activemq.queue</td>
                <td colspan=2>Consumer.TORS.VirtualTopic.ODB_ALL</td>


<td>activemq.queue</td>
                <td colspan=2>Consumer.TORS_a04.VirtualTopic.ODB_ALL</td>


'''

'''
<p><b>Version</b><br/>
            0.3.2</p>

'''


ProfileNeeded()

stats = {}
queueExpr = re.compile("<td>activemq.queue</td>[^<]*<td[^>]*>([^<]*)</td>", re.MULTILINE)
versionExpr = re.compile("<p><b>Version</b><br/>([^<]+)</p>", re.MULTILINE)
stateExpr = re.compile("<p><b>System State</b><br/>([^<]+)</p>", re.MULTILINE)


page = GetTemplate("queues_main")
setTemplate = GetTemplate("queues_set")
lineTemplate = GetTemplate("queues_line")

used = {}

def GetDeployedQueue(url):
	global used

	match = None
	version = "_N/A_"
	state = "_N/A_"
	try:
		page = GetWebPage(url)

		ver = versionExpr.search(page)
		if ver:
			version = ver.group(1).strip()

		st = stateExpr.search(page)
		if st:
			state = st.group(1).strip()

		match = queueExpr.search(page)

	except:
		return {"queue": "_N/A_", "version": version, "state": state}

	if match:
		key = match.group(1)
		if used.has_key(key):
			key = "{color:red}%s{color}" % key
		used[key] = True
		return {"queue": key, "version": version, "state": state}

	return {"queue": "", "version": version, "state": state}

print "--- Check if connected..."
try:
	GetWebPage(config["check_connection_url"])
except:
	print "[!] Not connected to VPN!"
	exit(0)

## Getting queues consumers

subscribers = ""
try:
	doc = libxml2.parseFile("queues.txt")
	queues = [q.prop("name") for q in doc.xpathNewContext().xpathEval("//queue/stats[@consumerCount='0']/parent::*")]
	ours = re.compile("(tors|ras|cloud)", re.IGNORECASE)

	for q in queues:
		if ours.search(q):
			q = "{color:red}%s{color}" % q
		if subscribers:
			subscribers += ", "
		subscribers += q
except:
	print "[!] Error parsing queues"
	exit(0)
	pass

## Getting deployed versions

queues = ""
for set in sorted(config["deployments"].keys()):
	print "--- %s" % set
	result = []
	for env in sorted(config["deployments"][set].keys()):
		url = "http://%s/info" % config["deployments"][set][env]
		parsed = GetDeployedQueue(url)
		print "%s (ver. %s) uses queue %s" % (env, parsed["version"], parsed["queue"])
		result.append(FillTemplate(lineTemplate, {"##TITLE##": env, "##URL##": url, "##COMMENT##": parsed["queue"], "##VERSION##": parsed["version"], "##STATE##": parsed["state"]}))
	queues += FillTemplate(setTemplate, {"##TITLE##": set, "##INSTANCES##": "".join(result)}) + "\n";

print "--- Publishing to wiki"

wikiServer = xmlrpclib.ServerProxy(config["wiki_xmlrpc"])
wikiToken = wikiServer.confluence1.login(config["wiki"]["user"], config["wiki"]["password"])

SaveWikiPage(wikiServer, wikiToken, config["personal_space"], "ActiveMQ queues utilization (autogenerated)", FillTemplate(page, {"##CONSUMERS##": subscribers, "##QUEUES##": queues, "##UPDATED##": datetime.datetime.today().strftime("%b %d, %Y (%H:%M)")}))

print "Done."
